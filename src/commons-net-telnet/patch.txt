Index: InvalidTelnetOptionException.java
===================================================================
--- InvalidTelnetOptionException.java	(revision 1037080)
+++ InvalidTelnetOptionException.java	(working copy)
@@ -24,6 +24,7 @@
  * <p>
  * @author Bruno D'Avanzo
  ***/
+@SuppressWarnings("serial")
 public class InvalidTelnetOptionException extends Exception
 {
 
Index: TelnetInputListener.java
===================================================================
--- TelnetInputListener.java	(revision 0)
+++ TelnetInputListener.java	(revision 0)
@@ -0,0 +1,37 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.net.telnet;
+
+/***
+ * Listener interface used for notification that incoming data is
+ * available to be read.
+ *
+ * @see TelnetClient
+ * @author Archie L. Cobbs
+ ***/
+public interface TelnetInputListener
+{
+
+    /***
+     * Callback method invoked when new incoming data is available on a
+     * {@link TelnetClient}'s {@link TelnetClient#getInputStream input stream}.
+     *
+     * @see TelnetClient#registerInputListener
+     ***/
+    public void telnetInputAvailable();
+}

Property changes on: TelnetInputListener.java
___________________________________________________________________
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

Index: TelnetInputStream.java
===================================================================
--- TelnetInputStream.java	(revision 1037080)
+++ TelnetInputStream.java	(working copy)
@@ -208,6 +208,9 @@
                     __receiveState = _STATE_SB;
                     continue;
                 /* TERMINAL-TYPE option (end)*/
+                case TelnetCommand.SE:              // unexpected byte! ignore it
+                    __receiveState = _STATE_DATA;
+                    continue;
                 case TelnetCommand.IAC:
                     __receiveState = _STATE_DATA;
                     break; // exit to enclosing switch to return IAC from read
@@ -258,7 +261,8 @@
                     continue;
                 default:
                     // store suboption char
-                    __suboption[__suboption_count++] = ch;
+                    if (__suboption_count < __suboption.length)
+                        __suboption[__suboption_count++] = ch;
                     break;
                 }
                 __receiveState = _STATE_SB;
@@ -274,11 +278,14 @@
                     }
                     __receiveState = _STATE_DATA;
                     continue;
-                default:
-                    __receiveState = _STATE_SB;
+                case TelnetCommand.IAC:
+                    if (__suboption_count < __suboption.length)
+                        __suboption[__suboption_count++] = ch;
                     break;
+                default:            // unexpected byte! ignore it
+                    break;
                 }
-                __receiveState = _STATE_DATA;
+                __receiveState = _STATE_SB;
                 continue;
             /* TERMINAL-TYPE option (end)*/
             }
@@ -292,13 +299,15 @@
     // synchronized(__client) critical sections are to protect against
     // TelnetOutputStream writing through the telnet client at same time
     // as a processDo/Will/etc. command invoked from TelnetInputStream
-    // tries to write.
-    private void __processChar(int ch) throws InterruptedException
+    // tries to write. Returns true if buffer was previously empty.
+    private boolean __processChar(int ch) throws InterruptedException
     {
         // Critical section because we're altering __bytesAvailable,
         // __queueTail, and the contents of _queue.
+        boolean bufferWasEmpty;
         synchronized (__queue)
         {
+            bufferWasEmpty = (__bytesAvailable == 0);
             while (__bytesAvailable >= __queue.length - 1)
             {
                 // The queue is full. We need to wait before adding any more data to it. Hopefully the stream owner
@@ -335,6 +344,7 @@
             if (++__queueTail >= __queue.length)
                 __queueTail = 0;
         }
+        return bufferWasEmpty;
     }
 
     @Override
@@ -607,15 +617,21 @@
                     break _outerLoop;
                 }
 
+                // Process new character
+                boolean notify = false;
                 try
                 {
-                    __processChar(ch);
+                    notify = __processChar(ch);
                 }
                 catch (InterruptedException e)
                 {
                     if (__isClosed)
                         break _outerLoop;
                 }
+
+                // Notify input listener if buffer was previously empty
+                if (notify)
+                    __client.notifyInputListener();
             }
         }
         catch (IOException ioe)
Index: TelnetClient.java
===================================================================
--- TelnetClient.java	(revision 1037080)
+++ TelnetClient.java	(working copy)
@@ -53,6 +53,7 @@
     private InputStream __input;
     private OutputStream __output;
     protected boolean readerThread = true;
+    private TelnetInputListener inputListener;
 
     /***
      * Default TelnetClient constructor.
@@ -207,6 +208,30 @@
     }
     /* Code Section added for supporting AYT (start)*/
 
+    /***
+     * Sends a protocol-specific subnegotiation message to the remote peer.
+     * {@link TelnetClient} will add the IAC SB &amp; IAC SE framing bytes;
+     * the first byte in {@code message} should be the appropriate telnet
+     * option code.
+     *
+     * <p>
+     * This method does not wait for any response. Subnegotiation messages
+     * sent by the remote end can be handled by registering an approrpriate
+     * {@link TelnetOptionHandler}.
+     * </p>
+     *
+     * @param message option code followed by subnegotiation payload
+     * @throws IllegalArgumentException if {@code message} has length zero
+     * @throws IOException if an I/O error occurs while writing the message
+     ***/
+    public void sendSubnegotiation(int[] message)
+    throws IOException, IllegalArgumentException
+    {
+        if (message.length < 1)
+            throw new IllegalArgumentException("zero length message");
+        _sendSubnegotiation(message);
+    }
+
     /* open TelnetOptionHandler functionality (start)*/
 
     /***
@@ -285,9 +310,29 @@
 
     /***
      * Sets the status of the reader thread.
-     * The reader thread status will apply to all subsequent connections
+     *
      * <p>
-     * @param flag - true switches the reader thread on, false switches it off
+     * When enabled, a seaparate internal reader thread is created for new
+     * connections to read incoming data as it arrives. This results in
+     * immediate handling of option negotiation, notifications, etc.
+     * (at least until the fixed-size internal buffer fills up).
+     * Otherwise, no thread is created an all negotiation and option
+     * handling is deferred until a read() is performed on the
+     * {@link #getInputStream input stream}.
+     * </p>
+     *
+     * <p>
+     * The reader thread must be enabled for {@link TelnetInputListener}
+     * support.
+     * </p>
+     *
+     * <p>
+     * When this method is invoked, the reader thread status will apply to all
+     * subsequent connections; the current connection (if any) is not affected.
+     * </p>
+     *
+     * @param flag true to enable the reader thread, false to disable
+     * @see #registerInputListener
      ***/
     public void setReaderThread(boolean flag)
     {
@@ -297,10 +342,50 @@
     /***
      * Gets the status of the reader thread.
      * <p>
-     * @return true if the reader thread is on, false otherwise
+     * @return true if the reader thread is enabled, false otherwise
      ***/
     public boolean getReaderThread()
     {
         return (readerThread);
     }
+
+    /***
+     * Register a listener to be notified when new incoming data is
+     * available to be read on the {@link #getInputStream input stream}.
+     *
+     * <p>
+     * More precisely, notifications are issued whenever the number of
+     * bytes available for immediate reading (i.e., the value returned
+     * by {@link InputStream#available}) transitions from zero to non-zero.
+     * Note that (in general) multiple reads may be required to empty the
+     * buffer and reset this notification, because incoming bytes are being
+     * added to the internal buffer asynchronously.
+     * </p>
+     *
+     * <p>
+     * Notifications are only supported when a {@link #setReaderThread
+     * reader thread} is enabled for the connection.
+     * </p>
+     *
+     * @param listener listener to be registered; replaces any previous
+     ***/
+    public void registerInputListener(TelnetInputListener listener)
+    {
+        this.inputListener = listener;
+    }
+
+    /***
+     * Unregisters the current {@link TelnetInputListener}, if any.
+     ***/
+    public void unregisterInputListener()
+    {
+        this.inputListener = null;
+    }
+
+    // Notify input listener
+    void notifyInputListener() {
+        TelnetInputListener listener = this.inputListener;
+        if (listener != null)
+            listener.telnetInputAvailable();
+    }
 }
Index: Telnet.java
===================================================================
--- Telnet.java	(revision 1037080)
+++ Telnet.java	(working copy)
@@ -790,12 +790,25 @@
         }
         if (subn != null)
         {
-            byte byteresp[] = new byte[subn.length];
+
+            /* Count IAC bytes, which we must escape */
+            int ndups = 0;
             for (int ii = 0; ii < subn.length; ii++)
             {
-                byteresp[ii] = (byte) subn[ii];
+                if (subn[ii] == TelnetCommand.IAC)
+                    ndups++;
             }
 
+            /* Copy bytes into byte array, escaping IAC's */
+            byte byteresp[] = new byte[subn.length + ndups];
+            int jj = 0;
+            for (int ii = 0; ii < subn.length; ii++)
+            {
+                byteresp[jj++] = (byte)subn[ii];
+                if (subn[ii] == TelnetCommand.IAC)
+                    byteresp[jj++] = (byte)subn[ii];
+            }
+
             _output_.write(_COMMAND_SB);
             _output_.write(byteresp);
             _output_.write(_COMMAND_SE);
